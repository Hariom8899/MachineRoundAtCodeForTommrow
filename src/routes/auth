const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../models/user');
const jwt = require('jsonwebtoken');
const { validateSingUpData } = require('../utils/validation');
const nodemailer = require("nodemailer");

const authRouter = express.Router();

authRouter.post('/signUp', async (req, res) => {
  try{
    validateSingUpData(req);
    const {firstName, lastName, email, password } = req.body;
    const hashPassword = await bcrypt.hash(password, 10);
    const user = new User({
        firstName,
        lastName,
        email,
        password:hashPassword,
    })

    await user.save();
    res.send('SignUp Success');
  }
  catch(err){
    res.status(400).send('Erro Occured in Signup ' + err.message);
  }
})

authRouter.post('/login', async (req, res) => {
   try{
    const { email, password } = req.body;
    const user = await User.findOne({email:email});
    if(!user){
        throw new Error('Please Login No Such Email Exists');
    }
    const hash = user.password;
    const isPasswordCorrect = await bcrypt.compare(password, hash );
    if(isPasswordCorrect){

    const token = await jwt.sign({_id:user._id}, "secretKey", {expiresIn: "1d"});
    res.cookie("token", token);
    res.send('Login Success');
    }
    else{
        throw new Error('Incorrect Password');
    }

  }
  catch(err){
    res.status(400).send('Error Occured in Login ' + err.message);
  }
})

authRouter.patch('/reset-password', async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const resetToken = jwt.sign({ _id: user._id }, "secretKey", { expiresIn: '1h' });
    console.log(resetToken);

    // Generate reset link
    const resetLink = `http://localhost:5000/reset-password/${resetToken}`;

    // Set up email transporter
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER, // sender address
      to: 'hariomtiwari.22.88@gmail.com', // list of receivers
      subject: 'Subject', // Subject line
      text: 'Hello world?', // plain text body
    };
    
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.log('Error:', error);
      } else {
        console.log('Email sent:', info.response);
      }
    });

    res.status(200).json({ message: 'Password reset link sent to your email.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

authRouter.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  try {
    // Verify the token
    const decoded = jwt.verify(token, "secretKey");
    const userId = decoded.userId;

    // Hash the new password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Update the user's password
    await User.findByIdAndUpdate(userId, { password: hashedPassword });

    res.status(200).json({ message: 'Password updated successfully' });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: 'Invalid or expired token' });
  }
});


authRouter.get('/', async (req, res) => {
    try{
        const {firstName, lastName, email } = req.user;
        res.json({
            "firstName":firstName,
            "lastName":lastName,
            "email":email,
        });
    }
    catch(err){
        res.status(400).send('Error Occured in getting user ' + err.message);
    }
})

module.exports = authRouter;